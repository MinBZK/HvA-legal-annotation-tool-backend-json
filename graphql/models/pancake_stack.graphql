extend type Query {
    pancakeStackById(
        id: ID! @rules(apply: ["exists:pancake_stacks,id"])
    ): PancakeStack!
    pancakeStacks: [PancakeStack!]!
}

extend type Mutation {
    createPancakeStack(
        input: CreatePancakeStackInput! @spread
    ): PancakeStack!

    updatePancakeStack(
        input: UpdatePancakeStackInput! @spread
    ): PancakeStack!

    deletePancakeStack(
        id: ID! @rules(apply: ["exists:pancake_stacks,id"])
    ): Boolean!
}

type PancakeStack {
    id:        ID!
    name:      String!
    pancakes:  [Pancake!]! @hasMany
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime! @rename(attribute: "updated_at")
}

input CreatePancakeStackInput {
    name:     String! @rules(apply: ["unique:pancake_stacks,name"])
    pancakes: [ID!]! @rules(apply: ["exists:pancakes,id"])
}

input UpdatePancakeStackInput {
    id:   ID! @rules(apply: ["exists:pancake_stacks,id"])
    name: String!
    pancakes: [ID!]! @rules(apply: ["exists:pancakes,id"])
}
