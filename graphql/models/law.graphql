extend type Query {
    laws: [Law!]! @all
    law(id: UUID! @eq @rules(apply: ["exists:laws,id"])): Law! @find
}

extend type Mutation {
    importXml(file: Upload!): Law!
}

extend type Mutation {
    deleteLaw(
        input: DeleteLawInput! @spread
    ):Boolean!
}

type Law {
    id: UUID!
    title: String!
    text: String!
    isPublished: Boolean! @rename(attribute: "is_published")
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime! @rename(attribute: "updated_at")

    articles: [Article!]! @hasMany
}

input DeleteLawInput {
    id: UUID!
}

extend type Mutation{

    saveAnnotatedLaw(input:AnnotatedLawInput! @spread):Law!
}

input AnnotatedLawInput{

    lawId:UUID! @rules(apply: ["exists:laws,id"])
    isPublished: Boolean
    annotations: [AnnotationInput!]!
}
input AnnotationInput{
    text:String!
    matterId: UUID!
    comment:String
    cursorIndex:Int!
}
