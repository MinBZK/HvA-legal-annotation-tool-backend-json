# TODO: Pipeline setup. Below is just a mockup, which is almost correct, except the composer installation.

#stages:
#  - install
#  - compile
#  - test
#
#image: docker:latest
#services:
#  - name: docker:20.10.16-dind
#
#variables:
#  DOCKER_DRIVER: overlay2
#  DOCKER_TLS_CERTDIR: ""
#
#
#composer-install:
#  stage: install
#  variables:
#    COMPOSER_TAG: "2"
#    COMPOSER_SSH_DEPLOY_KEY: $GITLAB_RUNNER_RSA
#    COMPOSER_ARGS: "--ignore-platform-reqs --no-suggest --no-ansi --no-interaction --no-progress --optimize-autoloader --prefer-dist --no-scripts"
#  before_script:
#    - echo $CONTAINER_REGISTRY_PASSWORD | docker login -u $CONTAINER_REGISTRY_USERNAME $CONTAINER_REGISTRY_URL --password-stdin
#    - cp .env.pipeline .env
#  script:
#    - PROJECT_PATH=$(pwd)
#    - echo $PROJECT_PATH
#    - cd $PROJECT_PATH
#    - ls
#    - >
#      if [ "$COMPOSER_SSH_DEPLOY_KEY" == "" ]; then
#        docker run --volume "${PROJECT_PATH}":/app --rm $CONTAINER_REGISTRY_URL/internal/docker/composer:${COMPOSER_TAG} install $COMPOSER_ARGS
#      else
#        docker run --volume "${PROJECT_PATH}":/app --rm -e "SSH_DEPLOY_KEY=$COMPOSER_SSH_DEPLOY_KEY" $CONTAINER_REGISTRY_URL/internal/docker/composer:${COMPOSER_TAG} install --ignore-platform-reqs $COMPOSER_ARGS
#      fi
#  artifacts:
#    paths:
#      - .env
#      - public/
#      - vendor/
#      - storage/
#  only:
#    - tags
#    - merge_requests
#
#
#build_assets:
#  stage: compile
#  image: node:16.13-alpine
#  script:
#    - npm install
#    - npm run prod
#  artifacts:
#    name: "$CI_JOB_ID-$CI_BUILD_REF_NAME"
#    expire_in: 1 hour
#    paths:
#      - public/
#  only:
#    - tags
#    - merge_requests
#
#
#phpunit:
#  stage: test
#  image: docker/compose
#  before_script:
#    - apk add curl
#  script:
#    - ./.gitlab-ci-scripts/phpunit.sh
#  artifacts:
#    paths:
#      - coverage
#  coverage: /^\s*Lines:\s*\d+.\d+\%/
#  only:
#    - tags
#    - merge_requests
